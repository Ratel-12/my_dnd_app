{"ast":null,"code":"var _jsxFileName = \"/home/luke/Desktop/my_dnd_app/frontend/src/components/MonsterList.js\",\n  _s = $RefreshSig$();\n// components/MonsterList.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\naxios.defaults.baseURL = 'http://localhost:5000';\nconst MonsterList = ({\n  match\n}) => {\n  _s();\n  const userId = match.params.userId;\n  const [monsters, setMonsters] = useState([]);\n  const [username, setUsername] = useState('');\n  useEffect(() => {\n    const fetchMonsters = async () => {\n      try {\n        const monsterResponse = await axios.get(`/api/monsters/user/${userId}`);\n        const userResponse = await axios.get(`/api/users/${userId}`);\n        console.log(\"Monsters:\", monsterResponse.data); // Logging the monsters data\n        console.log(\"User:\", userResponse.data); // Logging the user data\n        setMonsters(monsterResponse.data);\n        setUsername(userResponse.data.username);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchMonsters();\n  }, [userId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Monsters of the user: \", username]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: monsters.map(monster => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/monster-details/${monster.id}`,\n          children: monster.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 25\n        }, this)\n      }, monster.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n_s(MonsterList, \"Bk3cSs6CJIWvM3N816SG1yB8VOQ=\");\n_c = MonsterList;\nexport default MonsterList;\nvar _c;\n$RefreshReg$(_c, \"MonsterList\");","map":{"version":3,"names":["React","useState","useEffect","axios","Link","jsxDEV","_jsxDEV","defaults","baseURL","MonsterList","match","_s","userId","params","monsters","setMonsters","username","setUsername","fetchMonsters","monsterResponse","get","userResponse","console","log","data","error","children","fileName","_jsxFileName","lineNumber","columnNumber","map","monster","to","id","name","_c","$RefreshReg$"],"sources":["/home/luke/Desktop/my_dnd_app/frontend/src/components/MonsterList.js"],"sourcesContent":["// components/MonsterList.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\n\naxios.defaults.baseURL = 'http://localhost:5000';\n\nconst MonsterList = ({ match }) => {\n    const userId = match.params.userId;\n    const [monsters, setMonsters] = useState([]);\n    const [username, setUsername] = useState('');\n\n    useEffect(() => {\n        const fetchMonsters = async () => {\n            try {\n                const monsterResponse = await axios.get(`/api/monsters/user/${userId}`);\n                const userResponse = await axios.get(`/api/users/${userId}`);\n                console.log(\"Monsters:\", monsterResponse.data);  // Logging the monsters data\n                console.log(\"User:\", userResponse.data);         // Logging the user data\n                setMonsters(monsterResponse.data);\n                setUsername(userResponse.data.username);\n            } catch (error) {\n                console.error('Error fetching data:', error);\n            }\n        };\n\n        fetchMonsters();\n    }, [userId]);\n\n    return (\n        <div>\n            <h2>Monsters of the user: {username}</h2>\n            <ul>\n                {monsters.map(monster => (\n                    <li key={monster.id}>\n                        <Link to={`/monster-details/${monster.id}`}>{monster.name}</Link>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n\nexport default MonsterList;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExCH,KAAK,CAACI,QAAQ,CAACC,OAAO,GAAG,uBAAuB;AAEhD,MAAMC,WAAW,GAAGA,CAAC;EAAEC;AAAM,CAAC,KAAK;EAAAC,EAAA;EAC/B,MAAMC,MAAM,GAAGF,KAAK,CAACG,MAAM,CAACD,MAAM;EAClC,MAAM,CAACE,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACZ,MAAMgB,aAAa,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACA,MAAMC,eAAe,GAAG,MAAMhB,KAAK,CAACiB,GAAG,CAAE,sBAAqBR,MAAO,EAAC,CAAC;QACvE,MAAMS,YAAY,GAAG,MAAMlB,KAAK,CAACiB,GAAG,CAAE,cAAaR,MAAO,EAAC,CAAC;QAC5DU,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEJ,eAAe,CAACK,IAAI,CAAC,CAAC,CAAE;QACjDF,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEF,YAAY,CAACG,IAAI,CAAC,CAAC,CAAS;QACjDT,WAAW,CAACI,eAAe,CAACK,IAAI,CAAC;QACjCP,WAAW,CAACI,YAAY,CAACG,IAAI,CAACR,QAAQ,CAAC;MAC3C,CAAC,CAAC,OAAOS,KAAK,EAAE;QACZH,OAAO,CAACG,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAChD;IACJ,CAAC;IAEDP,aAAa,CAAC,CAAC;EACnB,CAAC,EAAE,CAACN,MAAM,CAAC,CAAC;EAEZ,oBACIN,OAAA;IAAAoB,QAAA,gBACIpB,OAAA;MAAAoB,QAAA,GAAI,wBAAsB,EAACV,QAAQ;IAAA;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACzCxB,OAAA;MAAAoB,QAAA,EACKZ,QAAQ,CAACiB,GAAG,CAACC,OAAO,iBACjB1B,OAAA;QAAAoB,QAAA,eACIpB,OAAA,CAACF,IAAI;UAAC6B,EAAE,EAAG,oBAAmBD,OAAO,CAACE,EAAG,EAAE;UAAAR,QAAA,EAAEM,OAAO,CAACG;QAAI;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO;MAAC,GAD5DE,OAAO,CAACE,EAAE;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEf,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEd,CAAC;AAAAnB,EAAA,CAlCKF,WAAW;AAAA2B,EAAA,GAAX3B,WAAW;AAoCjB,eAAeA,WAAW;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}